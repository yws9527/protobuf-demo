// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "Grade.proto" (package "school", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PBClass } from "./Class";
/**
 * @generated from protobuf message school.PBGrade
 */
export interface PBGrade {
    /**
     * @generated from protobuf field: uint64 gradeId = 1;
     */
    gradeId: string;
    /**
     * @generated from protobuf field: string gradeName = 2;
     */
    gradeName: string;
    /**
     * @generated from protobuf field: string gradeCode = 3;
     */
    gradeCode: string;
    /**
     * @generated from protobuf field: repeated school.PBClass children = 4;
     */
    children: PBClass[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PBGrade$Type extends MessageType<PBGrade> {
    constructor() {
        super("school.PBGrade", [
            { no: 1, name: "gradeId", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "gradeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gradeCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PBClass }
        ]);
    }
    create(value?: PartialMessage<PBGrade>): PBGrade {
        const message = { gradeId: "0", gradeName: "", gradeCode: "", children: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBGrade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBGrade): PBGrade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 gradeId */ 1:
                    message.gradeId = reader.uint64().toString();
                    break;
                case /* string gradeName */ 2:
                    message.gradeName = reader.string();
                    break;
                case /* string gradeCode */ 3:
                    message.gradeCode = reader.string();
                    break;
                case /* repeated school.PBClass children */ 4:
                    message.children.push(PBClass.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBGrade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 gradeId = 1; */
        if (message.gradeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.gradeId);
        /* string gradeName = 2; */
        if (message.gradeName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gradeName);
        /* string gradeCode = 3; */
        if (message.gradeCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gradeCode);
        /* repeated school.PBClass children = 4; */
        for (let i = 0; i < message.children.length; i++)
            PBClass.internalBinaryWrite(message.children[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message school.PBGrade
 */
export const PBGrade = new PBGrade$Type();
