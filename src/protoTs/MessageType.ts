// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "MessageType.proto" (package "framework", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 公共请求体
 *
 * @generated from protobuf message framework.PBMessageRequest
 */
export interface PBMessageRequest {
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number; // 消息类型
    /**
     * @generated from protobuf field: bytes messageData = 2;
     */
    messageData: Uint8Array; // 请求数据
    /**
     * @generated from protobuf field: uint64 timestamp = 3;
     */
    timestamp: string; // 客户端时间戳
    /**
     * @generated from protobuf field: string version = 4;
     */
    version: string; // api版本号
    /**
     * @generated from protobuf field: string token = 5;
     */
    token: string; // 用户登录后服务器返回的 token，用于登录校验
}
/**
 * 消息响应包
 *
 * @generated from protobuf message framework.PBMessageResponse
 */
export interface PBMessageResponse {
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number; // 消息类型
    /**
     * @generated from protobuf field: optional bytes messageData = 2;
     */
    messageData?: Uint8Array; // 返回数据
    /**
     * @generated from protobuf field: optional uint32 resultCode = 3;
     */
    resultCode?: number; // 返回的结果码
    /**
     * @generated from protobuf field: optional string resultInfo = 4;
     */
    resultInfo?: string; // 返回的结果消息提示文本（用于错误提示）
}
/**
 * 所有的接口
 *
 * @generated from protobuf enum framework.PBMessageType
 */
export enum PBMessageType {
    /**
     * 获取学校列表, PBSchoolListReq => PBSchoolListRsp
     *
     * @generated from protobuf enum value: getSchoolList = 0;
     */
    getSchoolList = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class PBMessageRequest$Type extends MessageType<PBMessageRequest> {
    constructor() {
        super("framework.PBMessageRequest", [
            { no: 1, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "messageData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PBMessageRequest>): PBMessageRequest {
        const message = { type: 0, messageData: new Uint8Array(0), timestamp: "0", version: "", token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBMessageRequest): PBMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* bytes messageData */ 2:
                    message.messageData = reader.bytes();
                    break;
                case /* uint64 timestamp */ 3:
                    message.timestamp = reader.uint64().toString();
                    break;
                case /* string version */ 4:
                    message.version = reader.string();
                    break;
                case /* string token */ 5:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* bytes messageData = 2; */
        if (message.messageData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.messageData);
        /* uint64 timestamp = 3; */
        if (message.timestamp !== "0")
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        /* string version = 4; */
        if (message.version !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.version);
        /* string token = 5; */
        if (message.token !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message framework.PBMessageRequest
 */
export const PBMessageRequest = new PBMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBMessageResponse$Type extends MessageType<PBMessageResponse> {
    constructor() {
        super("framework.PBMessageResponse", [
            { no: 1, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "messageData", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "resultCode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "resultInfo", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PBMessageResponse>): PBMessageResponse {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBMessageResponse): PBMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* optional bytes messageData */ 2:
                    message.messageData = reader.bytes();
                    break;
                case /* optional uint32 resultCode */ 3:
                    message.resultCode = reader.uint32();
                    break;
                case /* optional string resultInfo */ 4:
                    message.resultInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* optional bytes messageData = 2; */
        if (message.messageData !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.messageData);
        /* optional uint32 resultCode = 3; */
        if (message.resultCode !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.resultCode);
        /* optional string resultInfo = 4; */
        if (message.resultInfo !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.resultInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message framework.PBMessageResponse
 */
export const PBMessageResponse = new PBMessageResponse$Type();
