// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "Class.proto" (package "school", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message school.PBClass
 */
export interface PBClass {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: uint64 classId = 2;
     */
    classId: string;
    /**
     * @generated from protobuf field: string className = 3;
     */
    className: string;
    /**
     * @generated from protobuf field: string classCode = 4;
     */
    classCode: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PBClass$Type extends MessageType<PBClass> {
    constructor() {
        super("school.PBClass", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "classId", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "className", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "classCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PBClass>): PBClass {
        const message = { type: 0, classId: "0", className: "", classCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBClass>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBClass): PBClass {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* uint64 classId */ 2:
                    message.classId = reader.uint64().toString();
                    break;
                case /* string className */ 3:
                    message.className = reader.string();
                    break;
                case /* string classCode */ 4:
                    message.classCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBClass, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* uint64 classId = 2; */
        if (message.classId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.classId);
        /* string className = 3; */
        if (message.className !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.className);
        /* string classCode = 4; */
        if (message.classCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.classCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message school.PBClass
 */
export const PBClass = new PBClass$Type();
