// @generated by protobuf-ts 2.9.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "School.proto" (package "school", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PBGrade } from "./Grade";
/**
 * @generated from protobuf message school.PBSchool
 */
export interface PBSchool {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: uint64 schoolId = 2;
     */
    schoolId: string;
    /**
     * @generated from protobuf field: string schoolName = 3;
     */
    schoolName: string;
    /**
     * @generated from protobuf field: string schoolCode = 4;
     */
    schoolCode: string;
    /**
     * @generated from protobuf field: school.PBSchoolType schoolType = 5;
     */
    schoolType: PBSchoolType;
    /**
     * @generated from protobuf field: repeated school.PBGrade children = 6;
     */
    children: PBGrade[];
}
/**
 * @generated from protobuf message school.PBSchoolListReq
 */
export interface PBSchoolListReq {
    /**
     * @generated from protobuf field: uint32 offset = 1;
     */
    offset: number;
    /**
     * @generated from protobuf field: uint32 limit = 2;
     */
    limit: number;
}
/**
 * @generated from protobuf message school.PBSchoolListRsp
 */
export interface PBSchoolListRsp {
    /**
     * @generated from protobuf field: repeated school.PBSchool list = 1;
     */
    list: PBSchool[];
}
/**
 * @generated from protobuf enum school.PBSchoolType
 */
export enum PBSchoolType {
    /**
     * 小学
     *
     * @generated from protobuf enum value: PRIMARY = 0;
     */
    PRIMARY = 0,
    /**
     * 初中
     *
     * @generated from protobuf enum value: MIDDLE = 1;
     */
    MIDDLE = 1,
    /**
     * 高中
     *
     * @generated from protobuf enum value: SENIOR = 2;
     */
    SENIOR = 2,
    /**
     * 大学
     *
     * @generated from protobuf enum value: COLLEGE = 3;
     */
    COLLEGE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class PBSchool$Type extends MessageType<PBSchool> {
    constructor() {
        super("school.PBSchool", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "schoolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "schoolName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "schoolCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "schoolType", kind: "enum", T: () => ["school.PBSchoolType", PBSchoolType] },
            { no: 6, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PBGrade }
        ]);
    }
    create(value?: PartialMessage<PBSchool>): PBSchool {
        const message = { type: 0, schoolId: "0", schoolName: "", schoolCode: "", schoolType: 0, children: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBSchool>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBSchool): PBSchool {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* uint64 schoolId */ 2:
                    message.schoolId = reader.uint64().toString();
                    break;
                case /* string schoolName */ 3:
                    message.schoolName = reader.string();
                    break;
                case /* string schoolCode */ 4:
                    message.schoolCode = reader.string();
                    break;
                case /* school.PBSchoolType schoolType */ 5:
                    message.schoolType = reader.int32();
                    break;
                case /* repeated school.PBGrade children */ 6:
                    message.children.push(PBGrade.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBSchool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* uint64 schoolId = 2; */
        if (message.schoolId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.schoolId);
        /* string schoolName = 3; */
        if (message.schoolName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schoolName);
        /* string schoolCode = 4; */
        if (message.schoolCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schoolCode);
        /* school.PBSchoolType schoolType = 5; */
        if (message.schoolType !== 0)
            writer.tag(5, WireType.Varint).int32(message.schoolType);
        /* repeated school.PBGrade children = 6; */
        for (let i = 0; i < message.children.length; i++)
            PBGrade.internalBinaryWrite(message.children[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message school.PBSchool
 */
export const PBSchool = new PBSchool$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBSchoolListReq$Type extends MessageType<PBSchoolListReq> {
    constructor() {
        super("school.PBSchoolListReq", [
            { no: 1, name: "offset", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PBSchoolListReq>): PBSchoolListReq {
        const message = { offset: 0, limit: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBSchoolListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBSchoolListReq): PBSchoolListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 offset */ 1:
                    message.offset = reader.uint32();
                    break;
                case /* uint32 limit */ 2:
                    message.limit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBSchoolListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 offset = 1; */
        if (message.offset !== 0)
            writer.tag(1, WireType.Varint).uint32(message.offset);
        /* uint32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).uint32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message school.PBSchoolListReq
 */
export const PBSchoolListReq = new PBSchoolListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBSchoolListRsp$Type extends MessageType<PBSchoolListRsp> {
    constructor() {
        super("school.PBSchoolListRsp", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PBSchool }
        ]);
    }
    create(value?: PartialMessage<PBSchoolListRsp>): PBSchoolListRsp {
        const message = { list: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBSchoolListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBSchoolListRsp): PBSchoolListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated school.PBSchool list */ 1:
                    message.list.push(PBSchool.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBSchoolListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated school.PBSchool list = 1; */
        for (let i = 0; i < message.list.length; i++)
            PBSchool.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message school.PBSchoolListRsp
 */
export const PBSchoolListRsp = new PBSchoolListRsp$Type();
